{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `alloy_providers`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src\\provider_info.rs","byte_start":4,"byte_end":19,"line_start":1,"line_end":1,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use alloy_providers::provider::RootProvider;","highlight_start":5,"highlight_end":20}],"label":"use of undeclared crate or module `alloy_providers`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: use of undeclared crate or module `alloy_providers`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\provider_info.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy_providers::provider::RootProvider;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `alloy_providers`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `alloy_rpc_client`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src\\provider_info.rs","byte_start":49,"byte_end":65,"line_start":2,"line_end":2,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use alloy_rpc_client::RpcClient;","highlight_start":5,"highlight_end":21}],"label":"use of undeclared crate or module `alloy_rpc_client`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `alloy_rpc_client`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\provider_info.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy_rpc_client::RpcClient;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `alloy_rpc_client`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `alloy_transport_http`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src\\provider_info.rs","byte_start":82,"byte_end":102,"line_start":3,"line_end":3,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use alloy_transport_http::Http;","highlight_start":5,"highlight_end":25}],"label":"use of undeclared crate or module `alloy_transport_http`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `alloy_transport_http`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\provider_info.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy_transport_http::Http;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `alloy_transport_http`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `alloy_primitives`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src\\transaction_info.rs","byte_start":28,"byte_end":44,"line_start":3,"line_end":3,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use alloy_primitives::{Address, Bytes, TxKind, B256, U256};","highlight_start":5,"highlight_end":21}],"label":"use of undeclared crate or module `alloy_primitives`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `alloy_primitives`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\transaction_info.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy_primitives::{Address, Bytes, TxKind, B256, U256};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `alloy_primitives`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `alloy_providers`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src\\transaction_info.rs","byte_start":167,"byte_end":182,"line_start":5,"line_end":5,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use alloy_providers::provider::Provider;","highlight_start":5,"highlight_end":20}],"label":"use of undeclared crate or module `alloy_providers`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: use of undeclared crate or module `alloy_providers`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\transaction_info.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy_providers::provider::Provider;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `alloy_providers`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `alloy_consensus`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src\\transaction_info.rs","byte_start":208,"byte_end":223,"line_start":6,"line_end":6,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use alloy_consensus::{transaction::eip4844, Transaction as ConsensusTransaction, TxEnvelope};","highlight_start":5,"highlight_end":20}],"label":"use of undeclared crate or module `alloy_consensus`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: use of undeclared crate or module `alloy_consensus`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\transaction_info.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy_consensus::{transaction::eip4844, Transaction as ConsensusTransaction, TxEnvelope};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `alloy_consensus`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `alloy_rpc_types`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src\\transaction_info.rs","byte_start":88,"byte_end":103,"line_start":4,"line_end":4,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use alloy_rpc_types::{BlockTransactionsKind, Transaction, TransactionReceipt};","highlight_start":5,"highlight_end":20}],"label":"use of undeclared crate or module `alloy_rpc_types`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `alloy_rpc_types`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\transaction_info.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy_rpc_types::{BlockTransactionsKind, Transaction, TransactionReceipt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `alloy_rpc_types`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `alloy_consensus`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src\\transaction_info.rs","byte_start":208,"byte_end":223,"line_start":6,"line_end":6,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use alloy_consensus::{transaction::eip4844, Transaction as ConsensusTransaction, TxEnvelope};","highlight_start":5,"highlight_end":20}],"label":"use of undeclared crate or module `alloy_consensus`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `alloy_consensus`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\transaction_info.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse alloy_consensus::{transaction::eip4844, Transaction as ConsensusTransaction, TxEnvelope};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `alloy_consensus`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `BlockHash`, `Sealable`, `Transaction`, `TxEnvelope`, `TxKind`, `eip4844 as tx_eip4844`, `error`, and `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\block_info.rs","byte_start":86,"byte_end":90,"line_start":7,"line_end":7,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            self, eip4844 as tx_eip4844, TxEnvelope","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\block_info.rs","byte_start":92,"byte_end":113,"line_start":7,"line_end":7,"column_start":19,"column_end":40,"is_primary":true,"text":[{"text":"            self, eip4844 as tx_eip4844, TxEnvelope","highlight_start":19,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\block_info.rs","byte_start":115,"byte_end":125,"line_start":7,"line_end":7,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"            self, eip4844 as tx_eip4844, TxEnvelope","highlight_start":42,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\block_info.rs","byte_start":306,"byte_end":315,"line_start":14,"line_end":14,"column_start":18,"column_end":27,"is_primary":true,"text":[{"text":"        Address, BlockHash, Bloom, Bytes, Sealable, TxKind, B256, B64, U256","highlight_start":18,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\block_info.rs","byte_start":331,"byte_end":339,"line_start":14,"line_end":14,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"        Address, BlockHash, Bloom, Bytes, Sealable, TxKind, B256, B64, U256","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\block_info.rs","byte_start":341,"byte_end":347,"line_start":14,"line_end":14,"column_start":53,"column_end":59,"is_primary":true,"text":[{"text":"        Address, BlockHash, Bloom, Bytes, Sealable, TxKind, B256, B64, U256","highlight_start":53,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\block_info.rs","byte_start":473,"byte_end":478,"line_start":22,"line_end":22,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"        error, Block, BlockTransactions, BlockTransactionsKind::Full, Header, Transaction, TransactionReceipt","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\block_info.rs","byte_start":543,"byte_end":554,"line_start":22,"line_end":22,"column_start":79,"column_end":90,"is_primary":true,"text":[{"text":"        error, Block, BlockTransactions, BlockTransactionsKind::Full, Header, Transaction, TransactionReceipt","highlight_start":79,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\block_info.rs","byte_start":48,"byte_end":138,"line_start":5,"line_end":8,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        transaction::","highlight_start":9,"highlight_end":22},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            self, eip4844 as tx_eip4844, TxEnvelope","highlight_start":1,"highlight_end":52},{"text":"        }, BlockHeader, Transaction as ConsensusTransaction","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\block_info.rs","byte_start":304,"byte_end":315,"line_start":14,"line_end":14,"column_start":16,"column_end":27,"is_primary":true,"text":[{"text":"        Address, BlockHash, Bloom, Bytes, Sealable, TxKind, B256, B64, U256","highlight_start":16,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\block_info.rs","byte_start":329,"byte_end":347,"line_start":14,"line_end":14,"column_start":41,"column_end":59,"is_primary":true,"text":[{"text":"        Address, BlockHash, Bloom, Bytes, Sealable, TxKind, B256, B64, U256","highlight_start":41,"highlight_end":59}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\block_info.rs","byte_start":473,"byte_end":480,"line_start":22,"line_end":22,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        error, Block, BlockTransactions, BlockTransactionsKind::Full, Header, Transaction, TransactionReceipt","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\block_info.rs","byte_start":541,"byte_end":554,"line_start":22,"line_end":22,"column_start":77,"column_end":90,"is_primary":true,"text":[{"text":"        error, Block, BlockTransactions, BlockTransactionsKind::Full, Header, Transaction, TransactionReceipt","highlight_start":77,"highlight_end":90}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `BlockHash`, `Sealable`, `Transaction`, `TxEnvelope`, `TxKind`, `eip4844 as tx_eip4844`, `error`, and `self`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:7:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self, eip4844 as tx_eip4844, TxEnvelope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Address, BlockHash, Bloom, Bytes, Sealable, TxKind, B256, B64, U256\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        error, Block, BlockTransactions, BlockTransactionsKind::Full, Header, Transaction, TransactionReceipt\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":3874,"byte_end":3882,"line_start":137,"line_end":137,"column_start":71,"column_end":79,"is_primary":true,"text":[{"text":"            transactions: Self::build_transactions_vec_from_block_ref(provider, &block).await?,","highlight_start":71,"highlight_end":79}],"label":"the trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Network`:\n  AnyNetwork\n  alloy::alloy_network::Ethereum","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `RootProvider`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":598,"byte_end":605,"line_start":20,"line_end":20,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":28,"highlight_end":35}],"label":"required by this bound in `RootProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:137:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            transactions: Self::build_transactions_vec_from_block_ref(provider, &block).await?,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Network`:\u001b[0m\n\u001b[0m              AnyNetwork\u001b[0m\n\u001b[0m              alloy::alloy_network::Ethereum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `RootProvider`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RootProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get_transaction_receipt` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":4503,"byte_end":4526,"line_start":153,"line_end":153,"column_start":87,"column_end":110,"is_primary":true,"text":[{"text":"                let transaction_receipt_option: Option<TransactionReceipt> = provider.get_transaction_receipt(*transaction.inner.tx_hash()).await?;","highlight_start":87,"highlight_end":110}],"label":"method cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs","byte_start":2367,"byte_end":2385,"line_start":81,"line_end":81,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Http<T> {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Network`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":571,"byte_end":617,"line_start":20,"line_end":20,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":1,"highlight_end":47}],"label":"doesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\nwhich is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\n`RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `get_transaction_receipt` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:153:87\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let transaction_receipt_option: Option<TransactionReceipt> = provider.get_transaction_receipt(*transaction.inner.tx_hash()).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs:81:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Http<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Network`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\u001b[0m\n\u001b[0m            which is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\u001b[0m\n\u001b[0m            `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get_block_by_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":5257,"byte_end":5276,"line_start":170,"line_end":170,"column_start":39,"column_end":58,"is_primary":true,"text":[{"text":"        if let Some(block) = provider.get_block_by_number(ident, Full).await?","highlight_start":39,"highlight_end":58}],"label":"method cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs","byte_start":2367,"byte_end":2385,"line_start":81,"line_end":81,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Http<T> {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Network`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":571,"byte_end":617,"line_start":20,"line_end":20,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":1,"highlight_end":47}],"label":"doesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\nwhich is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\n`RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `get_block_by_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:170:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(block) = provider.get_block_by_number(ident, Full).await?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs:81:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Http<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Network`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\u001b[0m\n\u001b[0m            which is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\u001b[0m\n\u001b[0m            `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get_transaction_receipt` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":5758,"byte_end":5781,"line_start":180,"line_end":180,"column_start":59,"column_end":82,"is_primary":true,"text":[{"text":"                    transaction_receipt_option = provider.get_transaction_receipt(*transaction.inner.tx_hash()).await?;","highlight_start":59,"highlight_end":82}],"label":"method cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs","byte_start":2367,"byte_end":2385,"line_start":81,"line_end":81,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Http<T> {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Network`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":571,"byte_end":617,"line_start":20,"line_end":20,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":1,"highlight_end":47}],"label":"doesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\nwhich is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\n`RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `get_transaction_receipt` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:180:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    transaction_receipt_option = provider.get_transaction_receipt(*transaction.inner.tx_hash()).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs:81:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Http<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Network`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\u001b[0m\n\u001b[0m            which is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\u001b[0m\n\u001b[0m            `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":6294,"byte_end":6320,"line_start":195,"line_end":195,"column_start":49,"column_end":75,"is_primary":true,"text":[{"text":"pub async fn get_latest_block_number(provider: &RootProvider<Http<Client>>) -> Result<u64, Box<dyn Error>>","highlight_start":49,"highlight_end":75}],"label":"the trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Network`:\n  AnyNetwork\n  alloy::alloy_network::Ethereum","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `RootProvider`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":598,"byte_end":605,"line_start":20,"line_end":20,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":28,"highlight_end":35}],"label":"required by this bound in `RootProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:195:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn get_latest_block_number(provider: &RootProvider<Http<Client>>) -> Result<u64, Box<dyn Error>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Network`:\u001b[0m\n\u001b[0m              AnyNetwork\u001b[0m\n\u001b[0m              alloy::alloy_network::Ethereum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `RootProvider`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RootProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get_block_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":6396,"byte_end":6412,"line_start":197,"line_end":197,"column_start":40,"column_end":56,"is_primary":true,"text":[{"text":"    let latest_block_number = provider.get_block_number().await?;","highlight_start":40,"highlight_end":56}],"label":"method cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs","byte_start":2367,"byte_end":2385,"line_start":81,"line_end":81,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Http<T> {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Network`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":571,"byte_end":617,"line_start":20,"line_end":20,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":1,"highlight_end":47}],"label":"doesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\nwhich is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\n`RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `get_block_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:197:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let latest_block_number = provider.get_block_number().await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs:81:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Http<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Network`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\u001b[0m\n\u001b[0m            which is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\u001b[0m\n\u001b[0m            `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":6802,"byte_end":6828,"line_start":210,"line_end":210,"column_start":44,"column_end":70,"is_primary":true,"text":[{"text":"pub async fn build_block_struct(provider: &RootProvider<Http<Client>>, ident: BlockNumberOrTag) -> Result<BlockStruct, Box<dyn Error>>","highlight_start":44,"highlight_end":70}],"label":"the trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Network`:\n  AnyNetwork\n  alloy::alloy_network::Ethereum","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `RootProvider`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":598,"byte_end":605,"line_start":20,"line_end":20,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":28,"highlight_end":35}],"label":"required by this bound in `RootProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:210:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn build_block_struct(provider: &RootProvider<Http<Client>>, ident: BlockNumberOrTag) -> Result<BlockStruct, Box<dyn Error>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Network`:\u001b[0m\n\u001b[0m              AnyNetwork\u001b[0m\n\u001b[0m              alloy::alloy_network::Ethereum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `RootProvider`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RootProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get_block_by_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":6947,"byte_end":6966,"line_start":212,"line_end":212,"column_start":48,"column_end":67,"is_primary":true,"text":[{"text":"    let block_option: Option<Block> = provider.get_block_by_number(ident, Full).await?;","highlight_start":48,"highlight_end":67}],"label":"method cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs","byte_start":2367,"byte_end":2385,"line_start":81,"line_end":81,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Http<T> {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Network`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":571,"byte_end":617,"line_start":20,"line_end":20,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":1,"highlight_end":47}],"label":"doesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\nwhich is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\n`RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `get_block_by_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:212:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let block_option: Option<Block> = provider.get_block_by_number(ident, Full).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs:81:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Http<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Network`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\u001b[0m\n\u001b[0m            which is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\u001b[0m\n\u001b[0m            `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":7852,"byte_end":7878,"line_start":237,"line_end":237,"column_start":51,"column_end":77,"is_primary":true,"text":[{"text":"pub async fn build_block_struct_simple(provider: &RootProvider<Http<Client>>, ident: BlockNumberOrTag) -> Result<BlockStructSimple, Box<dyn Error>>","highlight_start":51,"highlight_end":77}],"label":"the trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Network`:\n  AnyNetwork\n  alloy::alloy_network::Ethereum","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `RootProvider`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":598,"byte_end":605,"line_start":20,"line_end":20,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":28,"highlight_end":35}],"label":"required by this bound in `RootProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:237:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn build_block_struct_simple(provider: &RootProvider<Http<Client>>, ident: BlockNumberOrTag) -> Result<BlockStructSimple, Box<dyn Error>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Network`:\u001b[0m\n\u001b[0m              AnyNetwork\u001b[0m\n\u001b[0m              alloy::alloy_network::Ethereum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `RootProvider`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RootProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get_block_by_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":7991,"byte_end":8010,"line_start":239,"line_end":239,"column_start":38,"column_end":57,"is_primary":true,"text":[{"text":"    let block_data_option = provider.get_block_by_number(ident, Full).await?;","highlight_start":38,"highlight_end":57}],"label":"method cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs","byte_start":2367,"byte_end":2385,"line_start":81,"line_end":81,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Http<T> {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Network`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":571,"byte_end":617,"line_start":20,"line_end":20,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":1,"highlight_end":47}],"label":"doesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\nwhich is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\n`RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `get_block_by_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:239:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m239\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let block_data_option = provider.get_block_by_number(ident, Full).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs:81:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Http<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Network`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\u001b[0m\n\u001b[0m            which is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\u001b[0m\n\u001b[0m            `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":8424,"byte_end":8450,"line_start":254,"line_end":254,"column_start":48,"column_end":74,"is_primary":true,"text":[{"text":"pub async fn view_block_header_data(provider: &RootProvider<Http<Client>>, ident: BlockNumberOrTag) -> Result<BlockHeaderData, Box<dyn Error>>","highlight_start":48,"highlight_end":74}],"label":"the trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Network`:\n  AnyNetwork\n  alloy::alloy_network::Ethereum","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `RootProvider`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":598,"byte_end":605,"line_start":20,"line_end":20,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":28,"highlight_end":35}],"label":"required by this bound in `RootProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:254:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn view_block_header_data(provider: &RootProvider<Http<Client>>, ident: BlockNumberOrTag) -> Result<BlockHeaderData, Box<dyn Error>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Network`:\u001b[0m\n\u001b[0m              AnyNetwork\u001b[0m\n\u001b[0m              alloy::alloy_network::Ethereum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `RootProvider`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RootProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `get_block_by_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":8576,"byte_end":8595,"line_start":256,"line_end":256,"column_start":53,"column_end":72,"is_primary":true,"text":[{"text":"    let block_data_option: Option<Block> = provider.get_block_by_number(ident, Full).await?;","highlight_start":53,"highlight_end":72}],"label":"method cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs","byte_start":2367,"byte_end":2385,"line_start":81,"line_end":81,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Http<T> {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `_: Network`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":571,"byte_end":617,"line_start":20,"line_end":20,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":1,"highlight_end":47}],"label":"doesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\nwhich is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\n`RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\n`&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\nwhich is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `get_block_by_number` exists for reference `&RootProvider<Http<Client>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:256:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let block_data_option: Option<Block> = provider.get_block_by_number(ident, Full).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `&RootProvider<Http<Client>>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-transport-http-0.11.0\\src/lib.rs:81:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Http<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Network`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `_: Provider<Http<Client>>` or `_: Provider<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network`\u001b[0m\n\u001b[0m            which is required by `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>`\u001b[0m\n\u001b[0m            `RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Send`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\u001b[0m            `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: Sync`\u001b[0m\n\u001b[0m            which is required by `&RootProvider<alloy::transports::alloy_transport_http::Http<reqwest::Client>>: alloy::providers::Provider<_>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":3427,"byte_end":3453,"line_start":129,"line_end":129,"column_start":42,"column_end":68,"is_primary":true,"text":[{"text":"    pub async fn build_struct(provider: &RootProvider<Http<Client>>, block: Block) -> Result<BlockTransactionsDetails, Box<dyn Error>>","highlight_start":42,"highlight_end":68}],"label":"the trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Network`:\n  AnyNetwork\n  alloy::alloy_network::Ethereum","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `RootProvider`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":598,"byte_end":605,"line_start":20,"line_end":20,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":28,"highlight_end":35}],"label":"required by this bound in `RootProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:129:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn build_struct(provider: &RootProvider<Http<Client>>, block: Block) -> Result<BlockTransactionsDetails, Box<dyn Error>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Network`:\u001b[0m\n\u001b[0m              AnyNetwork\u001b[0m\n\u001b[0m              alloy::alloy_network::Ethereum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `RootProvider`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RootProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":4020,"byte_end":4046,"line_start":143,"line_end":143,"column_start":67,"column_end":93,"is_primary":true,"text":[{"text":"    pub async fn build_transactions_vec_from_block_ref(provider: &RootProvider<Http<Client>>, block: &Block) -> Result<Vec<TransactionDetails>, Box<dyn Error>>","highlight_start":67,"highlight_end":93}],"label":"the trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Network`:\n  AnyNetwork\n  alloy::alloy_network::Ethereum","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `RootProvider`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":598,"byte_end":605,"line_start":20,"line_end":20,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":28,"highlight_end":35}],"label":"required by this bound in `RootProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:143:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn build_transactions_vec_from_block_ref(provider: &RootProvider<Http<Client>>, block: &Block) -> Result<Vec<TransactionDetails>, Box<dyn Error>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Network`:\u001b[0m\n\u001b[0m              AnyNetwork\u001b[0m\n\u001b[0m              alloy::alloy_network::Ethereum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `RootProvider`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RootProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\block_info.rs","byte_start":5028,"byte_end":5054,"line_start":166,"line_end":166,"column_start":63,"column_end":89,"is_primary":true,"text":[{"text":"    pub async fn build_transactions_vec_from_ident(provider: &RootProvider<Http<Client>>, ident: BlockNumberOrTag) -> Result<Vec<TransactionDetails>, Box<dyn Error>>","highlight_start":63,"highlight_end":89}],"label":"the trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Network`:\n  AnyNetwork\n  alloy::alloy_network::Ethereum","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `RootProvider`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs","byte_start":598,"byte_end":605,"line_start":20,"line_end":20,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"pub struct RootProvider<N: Network = Ethereum> {","highlight_start":28,"highlight_end":35}],"label":"required by this bound in `RootProvider`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `alloy::transports::alloy_transport_http::Http<reqwest::Client>: Network` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:166:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn build_transactions_vec_from_ident(provider: &RootProvider<Http<Client>>, ident: BlockNumberOrTag) -> Result<Vec<TransactionDetails>, Box<dyn Error>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Network` is not implemented for `alloy::transports::alloy_transport_http::Http<reqwest::Client>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Network`:\u001b[0m\n\u001b[0m              AnyNetwork\u001b[0m\n\u001b[0m              alloy::alloy_network::Ethereum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `RootProvider`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ianka\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\alloy-provider-0.11.0\\src\\provider\\root.rs:20:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RootProvider<N: Network = Ethereum> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RootProvider`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `BlockHeader`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\block_info.rs","byte_start":138,"byte_end":149,"line_start":8,"line_end":8,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"        }, BlockHeader, Transaction as ConsensusTransaction","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `BlockHeader`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:8:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }, BlockHeader, Transaction as ConsensusTransaction\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Transaction`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\block_info.rs","byte_start":151,"byte_end":162,"line_start":8,"line_end":8,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        }, BlockHeader, Transaction as ConsensusTransaction","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `Transaction`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:8:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }, BlockHeader, Transaction as ConsensusTransaction\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Provider`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\block_info.rs","byte_start":407,"byte_end":415,"line_start":18,"line_end":18,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        Provider, RootProvider","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `Provider`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\block_info.rs:18:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Provider, RootProvider\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 23 previous errors; 4 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 23 previous errors; 4 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0432, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0432, E0433, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
